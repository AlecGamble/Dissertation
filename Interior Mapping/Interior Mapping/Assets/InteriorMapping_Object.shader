// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'

Shader "Unlit/Interior Mapping/Basic/Texture Atlas"
{
    Properties
    {
        _RoomTex ("Room Atlas", 2D) = "white" {}
        _FacadeTex("Facade Atlas", 2D) = "white" {}
        _Rooms ("Rooms", Vector) = (1,1,0,0)
        _Shininess("Shininess", Range(0.0, 1.0)) =  0.5
        _SpecColor("Specular Colour", Color) = (1.0, 1.0, 1.0, 1.0)

    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 pos : SV_POSITION;
                float3 tangentViewDir : TEXCOORD1;
                float normal : NORMAL;
            };

            sampler2D _RoomTex;
            sampler2D _FacadeTex;
            float4 _RoomTex_ST;
            float4 _FacadeTex_ST;
            float4 _Rooms;
            float _Shininess;
            float4 _SpecColor;

            v2f vert (appdata v)
            {
                v2f o;
                o.pos = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _RoomTex);
                o.normal = v.normal;

                // get tangent space camera vector
                float4 objCam = mul(unity_WorldToObject, float4(_WorldSpaceCameraPos, 1.0));
                // ray direction into room
                float3 viewDir = v.vertex.xyz - objCam.xyz;
                // wtf is tangent sign
                float tangentSign = v.tangent.w * unity_WorldTransformParams.w;
                // wtf is bitangent
                float3 bitangent = cross(v.normal.xyz, v.tangent.xyz) * tangentSign;
                o.tangentViewDir = float3(
                    dot(viewDir, v.tangent.xyz),
                    dot(viewDir, bitangent),
                    dot(viewDir, v.normal)
                );
                o.tangentViewDir *= _RoomTex_ST.xyx;
                return o;
            }

            float2 rand2(float co)
            {
                return frac(sin(co * float2(12.9898, 78.233)) * 43758.5453);
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float2 roomUV = frac(i.uv);
                float2 roomIndexUV = floor(i.uv);

                // contents of room generated by UVs not world space positions
                // could solve this by mirrored UV coordinates or 

                float2 randomisedRoomOffset = floor(rand2(roomIndexUV.x + roomIndexUV.y * (roomIndexUV.x + 1)) * _Rooms.xy);
                roomIndexUV += randomisedRoomOffset;

                fixed farFrac = tex2D(_RoomTex, (roomIndexUV + 0.5) / _Rooms.xy).a;
                float depthScale = 1.0 / (1.0 - farFrac) - 1.0;

                float3 pos = float3(roomUV * 2 - 1, -1);

                i.tangentViewDir.z *= -depthScale;
                float3 id = 1.0 / i.tangentViewDir;
                float3 k = abs(id) - pos * id;
                float kMin = min(min(k.x, k.y), k.z);
                pos += kMin * i.tangentViewDir;

                float interp = pos.z * 0.5 + 0.5;

                // account for perspective in "room" textures
                // assumes camera with an fov of 53.13 degrees (atan(0.5))
                float realZ = saturate(interp) / depthScale + 1;
                interp = 1.0 - (1.0 / realZ);
                interp *= depthScale + 1.0;

                // iterpolate from wall back to near wall
                float2 interiorUV = pos.xy * lerp(1.0, farFrac, interp);
                interiorUV = interiorUV * 0.5 + 0.5;

                // specular highlights
                // float3 lightDirection = normalize(_WorldSpaceLightPos0.xyz);
                // float3 lightReflectDirection = reflect(-lightDirection, i.normal);
                // float3 viewDirection = normalize(float3(float4(_WorldSpaceCameraPos.xyz, 1.0) - i.pos.xyz));
                // float3 lightSeeDirection = max(0.0,dot(lightReflectDirection, viewDirection));
                // float3 shininessPower = pow(lightSeeDirection, _Shininess);


                // float atten = 1.0;
            
                // float3 specularReflection = atten * _SpecColor.rgb  * shininessPower;
 
                // sample room atlas texture
                fixed4 room = tex2D(_RoomTex, (roomIndexUV + interiorUV.xy) / _Rooms.xy);
                fixed4 facade = tex2D(_FacadeTex, i.uv);
                return fixed4(lerp(room.rgb, facade.rgb, facade.a), 1.0);
            }
            ENDCG
        }
    }
}
